#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <stdlib.h>
#include <fcntl.h>
#include <math.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <time.h>
#include "ourheader.h"

//State Parameters
#define sdim 3
#define udim 2

// Manipulaltion variable for state and input space
  int smask[sdim]={6,6,6};
  int umask[udim]={3,3};
  int valuesmask[sdim]={0,0,0};
  int valueinmask[udim]={0,0};
  float lbs[sdim]={450,600,-3.4}; // lower bounds after SCOTS Quantization .. See in Controller.bdd file  and take first coordinate of each step
  float lbc[udim]={-240,-240};    // upper bounds Take from anywhere does not matter
  float etas[sdim]={30,30,0.2};   //eta values for STATE SPACE as specified in SCOTS FILE
  float etac[sdim]={120,120};     //eta values as INPUT SPACE specified in SCOTS FILE
  float tau= 0.7;                 //value of tau
/*
  udpSocket1 takes data from Image Processing server(BroadCaster).
  udpSocket2 receives ping from Robot and sends controls input to latest
  Here time measurement is done on the Robot.
  Make sure it is binded to correct IP Address and Port NUM same IP should also be registered in "IPAddresses.network.txt" file in at BroadCaster.
  clientSocket is used to send data to the Robot periodically here in 0.7 seconds.

*/

int main(){
  int udpSocket1,udpSocket2,nBytes1,nBytes2;//Sockets to recieve and send data
  float buffer1[3]={1,2,3};//to recive data from Broadcaster
  float buffer2[2]={1,2};  //to send data to Robot
  char pingbuffer[255];    //to receive ping from Robot
  int index;               //For conversion state to real values
  int* w = getpointer(0);  //Get pointer to INPUT Address of Controller IP CORE
  int* r = getpointer(4);  //Get pointer to OUTPUT Address of Controller IP CORE
  //int testcount=0;      //Debug variable to increment to make sure sync in Socket based communication
  struct sockaddr_in FPGAAddr1,FPGAAddr2,clientAddr;
  struct sockaddr_storage serverStorage1,serverStorage2;
  socklen_t addr_size1,addr_size2, client_addr_size;

  /*Create UDP socket*/
  udpSocket1 = socket(PF_INET, SOCK_DGRAM, 0);//To receive data from Broadcaster
  if(udpSocket1 > 0)
  printf("UDP SOCKET 1 created\n");
  else{
	  printf("Problem creating the Socket\n");
	  return udpSocket1;
  }

  udpSocket2 = socket(PF_INET, SOCK_DGRAM, 0);//To send data to Robot
  if(udpSocket2 > 0)
	  printf("UDP SOCKET 1 created\n");
  else{
  	  printf("Problem creating the Socket\n");
  	  return udpSocket1;
    }

  //Make udpsocket2 non-blocking to recieve ping in non-blocking way
  int flags = fcntl(udpSocket2, F_GETFL);
  flags |= O_NONBLOCK;
  fcntl(udpSocket2, F_SETFL, flags);

  /*Configure settings in address struct to recieve data from Broadcaster*/
  FPGAAddr1.sin_family = AF_INET;
  FPGAAddr1.sin_port = htons(9003);// Put Port Num According to Image Processing Server (Broadcaster)
  FPGAAddr1.sin_addr.s_addr = inet_addr("192.168.0.102");//IP Address of FPGA
  memset(FPGAAddr1.sin_zero, '\0', sizeof FPGAAddr1.sin_zero);

  /*Configure settings in address struct to send data to Robot*/
  FPGAAddr2.sin_family = AF_INET;
  FPGAAddr2.sin_port = htons(7809);//FPGA listens for ping at this port
  FPGAAddr2.sin_addr.s_addr = inet_addr("192.168.0.102");//IP Address of FPGA
  memset(FPGAAddr2.sin_zero, '\0', sizeof FPGAAddr2.sin_zero);

  /*Bind socket 1 with address struct */
  bind(udpSocket1, (struct sockaddr *) &FPGAAddr1, sizeof(FPGAAddr1));

  /*Bind socket 2 with address struct */
  bind(udpSocket2, (struct sockaddr *) &FPGAAddr2, sizeof(FPGAAddr2));

  /*Initialize size variable to be used later on*/
  addr_size1 = sizeof serverStorage1;
  addr_size2 = sizeof serverStorage2;

  while(1){
           /* Try to receive any incoming UDP datagram. Address and port of requesting client will be stored on serverStorage variable */
                  nBytes1= recvfrom(udpSocket1,buffer1,sizeof(buffer1),0,(struct sockaddr *)&serverStorage1, &addr_size1);

                  buffer1[1]= 1900-(buffer1[1]-580);//Match the new cartesian
                  buffer1[2]=-buffer1[2]; // Angle was flipped
                  printf(" %f | %f | %f \n",buffer1[0],buffer1[1],buffer1[2]);
                  //Check if Robot requires data
                  if(recvfrom(udpSocket2,pingbuffer,255,flags,(struct sockaddr *)&serverStorage2, &addr_size2)>0){ //ping is received
                      	 printf("Data Required\n");  //Data is required
/**********************************************************************************************************************/
          /* |Real State| -> |Index| -> [ CONTROLLER ON FPGA] -> |Index| -> |Real Control Input| */
                 index=statetoindexS(buffer1);//Get index of current state space
                 writeme(w,index); 				  //Write index on Controller IP CORE input
                 //usleep(1);                      //Read At
                 indextostateC(readme(r),buffer2); //Read At Controller IP CORE output
/**********************************************************************************************************************/

                 // Stop if in target or Tracker does-not detect it
	             if( (450<=buffer1[0] && buffer1[0]<=590 && 1900-(600-580)<=buffer1[1] && buffer1[1]<=1900-(840-580)) || buffer1[0]==-1 || buffer1[1]== -1 || buffer1[2]== -1 )
			           {
			            	buffer2[0]=0.00;
			          	    buffer2[1]=0.00;
			           }

                //send control inputs corresponding to latest x y and theta
                         sendto(udpSocket2,buffer2,sizeof(buffer2),0,(struct sockaddr *)&serverStorage2,addr_size2);//Send control inputs to Robot
                         printf("Data Sent\n");
	}

        else{
        	printf(" %f | %f \n",buffer2[0],buffer2[1]);
            printf("Data NOT Required\n");
        }
  }

  return 0;
}

/**************************************************************************/
//to set valuemask variables
void initMask(){
				for(int i=0;i<sdim-1;i++){
					     valuesmask[i]=pow(2,smask[i]-1);
 			    }
				for(int i=0;i<udim-1;i++){
						valueinmask[i]=pow(2,umask[i]-1);
				}
}

//Convert state space value into index
int statetoindexS(float state[]){
   		int id[sdim],index=0,i=0;
		for(i ;i<sdim;i++)
			id[i]=round(((state[i]-lbs[i])/etas[i]));
                index=id[sdim-1];
        for(int i= sdim-1;i>0;i--){
        	                       index=index|id[i];
        	                       index=(index<<smask[i]);
        }
    	index=index|id[0];
return index;
}

//convert control input index into real control inputs
void indextostateC(int index, float state[]){
                        for(int i=0;i<udim;i++){
                        	state[i]=0;
                        	state[i]= index & valueinmask[i];
                        	state[i]=lbc[i]+etac[i]*state[i];
                        	index=(index >> umask[i]);
                        }
}
